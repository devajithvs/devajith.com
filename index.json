[{"content":"A short description of the goals of the project The goal of this project was to develop an interactive query language for MLIR, similar to clang-query. An efficient tool for interactively querying the IR can largely assist debugging and testing in MLIR. The tool aims to make exploring and analyzing MLIR code easier for developers by providing a query language that allows them to search for specific patterns and operations within the MLIR codebase. This report provides an overview of the project\u0026rsquo;s progress, features implemented, challenges faced, and future directions.\nThe initial plan for the GSoC project was to implement basic queries for MLIR.\nProject Goals:\nDevelop a command-line tool that accepts queries and MLIR files as input. Implement a set of missing matchers that allow users to search for specific patterns and operations within MLIR code. Support common query functionalities like matching based on operation name, attributes, properties, etc. Provide helpful error diagnostics for query syntax errors or unsupported queries. Implement auto-completion and history features to enhance the user experience. Additional Features:\nOffer a mechanism to extract matched code regions as separate functions. What I did Progress so far:\nImplemented a parser and basic matching functionality, was able to adapt some of the code from clang-query Used the current existing matchers in MLIR for the functionality. eg, m_Constant() matcher. Autocomplete Error reporting/diagnostics Variadic argument matching Related:\nTalk at the EuroLLVM 2023 (during community bonding period): slides - recording Presented during one of the MLIR open design meetings: slides - recording Implemented most of the features internally on this branch: https://github.com/devajithvs/llvm-project/tree/devajith.14-mlir-query, just need to incrementally upstream and make changes as the reviews get merged.\nAccepted patch: https://reviews.llvm.org/D155127\nThe current state The tool provides the following set of basic queries:\nhasOpAttrName(string) hasOpName(string) isConstantOp() isNegInfFloat() isNegZeroFloat() isNonZero() isOne() isOneFloat() isPosInfFloat() isPosZeroFloat() isZero() isZeroFloat() The initial support for mlir-query with basic support is added here. This commit adds the initial version of the mlir-query tool, which makes use of the matchers already existing within the MLIR infrastructure.\nEven though other features are also implemented internally, due to the initial large size of the patch, it was decided to spend some time on the initial patch and make it right so that we don\u0026rsquo;t have more changes down the line.\nThe patch is quite large because even a very basic functional mlir-query needs the implementation of parsing, autocomplete, and diagnostics for a working prototype. I\u0026rsquo;ve stripped down some of the features from my internal branch to make it more lean. More features will be upstreamed as the current branch get merged.\nDemo A short demo illustrating mlir-query functionality with autocomplete\nWhat\u0026rsquo;s left to do Implement more matchers for different usescases. Upstream more features implemented in the internal repository (function extraction, variadic argument matching). What code got merged (or not) upstream Supporting patch: https://reviews.llvm.org/D147262 (merged)\nThe initial patch for mlir-query with basic support is added here: https://reviews.llvm.org/D155127 (accepted)\nAny challenges or important things learned during the project Through the presentations and code reviews I gave and submitted, I learned a lot. Doing GSoC was a rewarding experience and I would continue contributing to LLVM project and would love to see people using mlir-query.\nAcknowledgements I would like to thank my GSoC mentor, Jacques Pienaar for providing guidance throughout the GSoC project and valuable feedback even before the program began.\nI also extend my thanks to everyone who provided feedback, asked questions, and offered suggestions for the project.\n","permalink":"https://devajith.com/blog/gsoc-2023/","summary":"A short description of the goals of the project The goal of this project was to develop an interactive query language for MLIR, similar to clang-query. An efficient tool for interactively querying the IR can largely assist debugging and testing in MLIR. The tool aims to make exploring and analyzing MLIR code easier for developers by providing a query language that allows them to search for specific patterns and operations within the MLIR codebase.","title":"Interactive MLIR query tool to make exploring the IR easier (Google Summer of Code 2023)"},{"content":"Why? Get hired I use this blog as a clever tactic to attract awesome recruiters and companies who might want to hire me. It\u0026rsquo;s like my own personal job-hunting billboard. Improve my writing/language skills I\u0026rsquo;m not the a good writer (yet), but I\u0026rsquo;m constantly working on it! Every time someone visits my blog, I learn a new word to add to my growing vocabulary. If you see me in person, feel free to quiz me on the meaning of the word arabesque . It\u0026rsquo;s part of my weekly learning log! A scratchpad for my ideas I\u0026rsquo;m a genius\u0026hellip;or at least I think so in the moment. But if I don\u0026rsquo;t write down my random, sometimes crazy ideas, I\u0026rsquo;ll simply forget them. So now, thanks to my blog, I have a virtual scratchpad where I jot down all my Eureka moments. Who knows, one of them might just turn into a big thing! As a note to my future self 10 years from now, and I\u0026rsquo;m reminiscing about my journey. Thanks to my blog, I\u0026rsquo;ll have a record of all the crazy things I did, the lessons I learned, and the adventures. It\u0026rsquo;s like a time capsule that will remind me why I pursued my passions and didn\u0026rsquo;t waste my time binge-watching Youtube (maybe just a little). So, there you have it! My blog is more than just a collection of posts, it\u0026rsquo;s my online playground where I can showcase my skills, dump my thoughts, and leave a trail of hilarious stories for my future self. Plus, it\u0026rsquo;s a great way to procrastinate when I should be doing something else.\n","permalink":"https://devajith.com/blog/why-do-i-have-a-blog/","summary":"Why? Get hired I use this blog as a clever tactic to attract awesome recruiters and companies who might want to hire me. It\u0026rsquo;s like my own personal job-hunting billboard. Improve my writing/language skills I\u0026rsquo;m not the a good writer (yet), but I\u0026rsquo;m constantly working on it! Every time someone visits my blog, I learn a new word to add to my growing vocabulary. If you see me in person, feel free to quiz me on the meaning of the word arabesque .","title":"Why do I have a blog"},{"content":"What is Tweedisc? Tweedisc is an application that changes the way people engage with Twitter on Discord. It allows users to effortlessly post tweet links on their community Discord servers, and like, share, or retweet each other\u0026rsquo;s tweets without ever leaving Discord.\nUsecase and Target Audience Tweedisc has quickly become an indispensable tool for a wide range of users, including individuals, businesses, projects, and communities on Discord. It simplifies the process of interacting with tweets on Twitter and boosts engagement for small communities by facilitating interactions within Discord. With just a few clicks, users can easily link their Twitter accounts and start liking, sharing, and retweeting tweets, saving time and effort.\nProfits and Expenses My friend helped me ship the product to the target audience. In 10 days, we had 20 people signed up. It runs on a spare google cloud server that I have (basically free, google has an \u0026ldquo;always free\u0026rdquo; VPS instance that I use to run small applications).\nCurrently (as of 26th Jan 2022), the project has one paying customer (5$/month) and 51 users. The cost to run the server is zero, making the net revenue 5$.\nUPDATE: Tweedisc started gaining traction quickly, and within a few months, it reached a milestone of $400 in Monthly Recurring Revenue (MRR). This was a significant achievement for me, it proved that I can make money online and work for myself. With a lot of paying users, Tweedisc was able to generate decent revenue.\nUPDATE2: Despite the initial success, Tweedisc faced a setback when Twitter stopped providing API access. This decision affected the functionality of the tool, as it heavily relied on the Twitter API to interact with tweets. As a result, the project had to be discontinued, and the revenue generation came to a halt.\nDevelopment Sprint The journey of Tweedisc started with an ambitious development sprint that spanned just two days during the New Year. Here\u0026rsquo;s a brief overview of the development process:\nExtensive research and understanding of the API documentations for Twitter and Discord to determine the project\u0026rsquo;s feasibility.\nCoding of a Discord bot using the powerful Python library, discordpy. The bot is designed to react to Twitter links with like and retweet reactions, with notifications sent to the bot whenever a user reacts to a tweet.\nSigning up for a Twitter developer account to gain access to the Twitter API, which is rate-limited but more than sufficient for a prototype.\nImplementation of a seamless linking system that connects a user\u0026rsquo;s Twitter account with their Discord account using OAuth2 authentication for both Discord and Twitter.\nIntegration of the bot with the Twitter API, allowing it to make requests on behalf of users and perform corresponding reactions to tweets whenever a user reacts to a tweet on Discord.\nCreation of a user-friendly system that prompts unregistered users to link their Discord account with a URL, and deletes reactions and sends messages accordingly.\nOther Contributions In addition to the successful development of Tweedisc, I also made significant contributions to the Python API library for Twitter, called \u0026ldquo;Tweepy.\u0026rdquo; I submitted a pull request to address a missing feature, although it did not get merged as the maintainer had already pushed an update. Nevertheless, this experience allowed me to further enhance my coding skills and gain valuable insights into open-source collaboration.\nOauth2 The implementation of OAuth2 for Tweedisc was a challenging yet rewarding experience. It provided me with a deep understanding of how authentication works and allowed me to hone my technical skills in this area.\nReflection Tweedisc was a successful project that earned $5672 in revenue to date and had a significant number of paying users. However, due to Twitter\u0026rsquo;s decision to stop providing API access (made it very expensive), the project had to be discontinued. Tweedisc was my first successful startup.\n","permalink":"https://devajith.com/blog/tweedisc/","summary":"What is Tweedisc? Tweedisc is an application that changes the way people engage with Twitter on Discord. It allows users to effortlessly post tweet links on their community Discord servers, and like, share, or retweet each other\u0026rsquo;s tweets without ever leaving Discord.\nUsecase and Target Audience Tweedisc has quickly become an indispensable tool for a wide range of users, including individuals, businesses, projects, and communities on Discord. It simplifies the process of interacting with tweets on Twitter and boosts engagement for small communities by facilitating interactions within Discord.","title":"Tweedisc, a twitter integration bot"}]