[{"content":"A short description of the goals of the project The goal of this project was to develop an interactive query language for MLIR, similar to clang-query. An efficient tool for interactively querying the IR can largely assist debugging and testing in MLIR. The tool aims to make exploring and analyzing MLIR code easier for developers by providing a query language that allows them to search for specific patterns and operations within the MLIR codebase. This report provides an overview of the project\u0026rsquo;s progress, features implemented, challenges faced, and future directions.\nThe initial plan for the GSoC project was to implement basic queries for MLIR.\nProject Goals:\nDevelop a command-line tool that accepts queries and MLIR files as input. Implement a set of missing matchers that allow users to search for specific patterns and operations within MLIR code. Support common query functionalities like matching based on operation name, attributes, properties, etc. Provide helpful error diagnostics for query syntax errors or unsupported queries. Implement auto-completion and history features to enhance the user experience. Additional Features:\nOffer a mechanism to extract matched code regions as separate functions. What I did Progress so far:\nImplemented a parser and basic matching functionality, was able to adapt some of the code from clang-query Used the current existing matchers in MLIR for the functionality. eg, m_Constant() matcher. Autocomplete Variadic argument matching Error reporting/DIagnostics Related:\nTalk at the EuroLLVM 2023 (during community bonding period): slides - recording Presented during one of the MLIR open design meetings: slides - recording Implemented most of the features internally on this branch: https://github.com/devajithvs/llvm-project/tree/devajith.14-mlir-query, just need to incrementally upstream and make changes as the reviews get merged.\nAccepted patch: https://reviews.llvm.org/D155127\nThe current state The tool provides the following set of basic queries:\nhasOpAttrName(string) hasOpName(string) isConstantOp() isNegInfFloat() isNegZeroFloat() isNonZero() isOne() isOneFloat() isPosInfFloat() isPosZeroFloat() isZero() isZeroFloat() The initial support for mlir-query with basic support is added here. This commit adds the initial version of the mlir-query tool, which makes use of the matchers already existing within the MLIR infrastructure.\nEven though other features are also implemented internally, due to the initial large size of the patch, it was decided to spend some time on the initial patch and make it right so that we don\u0026rsquo;t have more changes down the line.\nThe patch is quite large because even a very basic functional mlir-query needs the implementation of parsing, autocomplete, and diagnostics for a working prototype. I\u0026rsquo;ve stripped down some of the features from my internal branch to make it more lean. More features will be upstreamed as the current branch get merged.\nDemo A short demo illustrating mlir-query functionality with autocomplete\nWhat\u0026rsquo;s left to do Implement more matchers for different usescases. Upstream more features implemented in the internal repository. What code got merged (or not) upstream Supporting patch: https://reviews.llvm.org/D147262 (merged)\nThe initial patch for mlir-query with basic support is added here: https://reviews.llvm.org/D155127 (accepted)\nAny challenges or important things you learned during the project Through the presentations and code reviews I gave and submitted, I learned a lot. Doing GSoC was a rewarding experience and I would continue contributing to LLVM project and would love to see people using mlir-query.\nAcknowledgements I would like to thank my GSoC mentor, Jacques Pienaar for providing guidance throughout the GSoC project and valuable feedback even before the program began.\nI also extend my thanks to everyone who provided feedback, asked questions, and offered suggestions for the project.\n","permalink":"https://devajith.com/blog/gsoc-2023/","summary":"A short description of the goals of the project The goal of this project was to develop an interactive query language for MLIR, similar to clang-query. An efficient tool for interactively querying the IR can largely assist debugging and testing in MLIR. The tool aims to make exploring and analyzing MLIR code easier for developers by providing a query language that allows them to search for specific patterns and operations within the MLIR codebase.","title":"Interactive MLIR query tool to make exploring the IR easier (Google Summer of Code 2023)"},{"content":"I started off as a Chemical Engineer, braving the infamous JEE exams and earning my stripes at an \u0026ldquo;IIT\u0026rdquo; in India. I even landed a job at Honeywell UOP, doing the whole chemical engineering thing. But little did I know that destiny had a different plan in store for me!\nI couldn\u0026rsquo;t resist the siren call of programming. So, while slinging chemical equations by day, I started freelancing as a full-stack developer on the side. And guess what? It was love at first code! I took the plunge and waved goodbye to chemical plants and heat exchangers, and pursued a Master\u0026rsquo;s in Computing at Cardiff University.\nIt didn\u0026rsquo;t stop there, I\u0026rsquo;ve had some seriously cool side projects along the way. I\u0026rsquo;ve built a Discord-Twitter integration bot called tweeDisc in just a day or two, and it has earned a whopping $5672 in gross revenue as of today! with a little help from some luck and my friend\u0026rsquo;s awesome sales skills.\nI also engaged in other side projects like running the mainline Linux kernel on my Android device, where I ran Linux natively on my smartphone. And to top it off, I even submitted a patch upstream to the Linux Kernel, adding regulator support to an accelerometer driver.\nIf you\u0026rsquo;re curious to know what coding escapades I\u0026rsquo;m up to now, check out my website for the latest projects.\nCurrent life and low-key boasting I\u0026rsquo;m currently slaying it as a Compiler Engineer Intern at Huawei UK, where I\u0026rsquo;m using MLIR and with my awesome colleagues to optimize performance and make BLAS routines FLY. I\u0026rsquo;ve even upstreamed patches to the LLVM Project as a part of this.\nBut wait, there\u0026rsquo;s more! I\u0026rsquo;m not just a tech whiz, I was also a competitive swimmer before my days at IIT Hyderabad. So, you can count on my determination and drive to excel in whatever I do.\nI\u0026rsquo;m also a self-proclaimed quick learner and team player, and the last time I updated this post, I was preparing for a talk at the EuroLLVM 2023 on my latest project, mlir-query. Can\u0026rsquo;t wait to share more about it!\nBut hey, if you\u0026rsquo;re looking for a more \u0026ldquo;formal\u0026rdquo; view (or better yet, want to hire me), feel free to peek at my resume. Cheers!\n","permalink":"https://devajith.com/blog/about-me/","summary":"I started off as a Chemical Engineer, braving the infamous JEE exams and earning my stripes at an \u0026ldquo;IIT\u0026rdquo; in India. I even landed a job at Honeywell UOP, doing the whole chemical engineering thing. But little did I know that destiny had a different plan in store for me!\nI couldn\u0026rsquo;t resist the siren call of programming. So, while slinging chemical equations by day, I started freelancing as a full-stack developer on the side.","title":"About Me"},{"content":"Oh, New Year\u0026rsquo;s Eve, the night that always promises to be a wild ride! Last year was tweedisc, but this year, it was next level craziness. So, it all started innocently enough on the 31st. We kicked off the day with some Indian masala dosa with vada in the morning, because nothing says \u0026ldquo;Happy New Year\u0026rdquo; like a spicy breakfast.\nThen, we hopped on a ship to cruise down the Thames River for some breathtaking views of London, which is truly a stunning city. We even checked out the aquarium. Then we went to the museum. We were hungry and couldn\u0026rsquo;t fully explore all of it because, let\u0026rsquo;s be honest, we were more interested in food than ancient artifacts. Plus, it was mostly Egyptian stuff with real mummies and bones, and I couldn\u0026rsquo;t help but imagine them coming to life like in those cheesy horror movies.\nThen came the main event of the night - the fireworks! But since we didn\u0026rsquo;t have tickets, we couldn\u0026rsquo;t go to the bridge to get a good view. After a lot of searching, we finally found a spot, and it was worth it. The fireworks were amazing, and the crowd was diverse, with a lot of Indian folks around. But the real showstopper was this guy who thought he could climb up a building under construction to get a better view (totally unsafe, by the way). The police were on him faster than you can say \u0026ldquo;Happy New Year\u0026rdquo;\nAfter the fireworks, we realized getting back to our Airbnb in Zone 6 was going to be a challenge with all the police restrictions. Buses were a no-go, so we sprinted to the tube station, only to find a massive crowd jostling to get in. We needed train passes, but our cards weren\u0026rsquo;t working. Then a random dude came up to us and said we didn\u0026rsquo;t need tickets on New Year\u0026rsquo;s Eve. Turns out, that was just a rumor, and we had to sneak out behind someone with a valid ticket to avoid getting caught. It was like a scene straight out of a spy movie, with adrenaline pumping and hearts racing!\nAnd then the real challenge began - getting back to our Airbnb. There was only one bus that could take us there, but Bus 109 never showed up. So we hopped on a different bus that got us close, but we still had to walk over a kilometer. And when we asked the bus driver for tickets, he seemed clueless and told us to just get on. Turns out, the buses were free on New Year\u0026rsquo;s Eve or maybe the driver was just as confused as we were!\nBut then things took an unexpected turn. We struck up a conversation with two guys on the bus who seemed to be living on a tight budget. They insisted we get off at a different stop to make it easier for us. It all sounded a bit sketchy, and we overheard them saying \u0026ldquo;maarega\u0026rdquo;, which means \u0026ldquo;kill\u0026rdquo; or could be a code word for who knows what! We decided to stick with Google\u0026rsquo;s directions and politely declined their offer. But when we got off the bus, they were right behind us, trying to get off at our stop. That\u0026rsquo;s when we knew it was time to activate our fight or flight response. Without even thinking, we both sprinted and ducked into a sideway, hoping to lose them.\nSo, there we were, sneaking around like spies, trying to avoid being spotted (if anyone was even following us) and hustling to get to the Airbnb as quickly as possible. But of course, we had to mess up the address first and ended up at the wrong place. Talk about bad luck! Finally, we found the right address and tried to open the door with the keys provided by the host. But guess what? The key 8017 decided to play hard to get and didn\u0026rsquo;t work! We tried everything, dabbling and jiggling, pressing all the bell buttons like a mad DJ, until we got a call from an unknown number. And guess what that call said? Yup, you guessed it right - our booking was canceled because the place was overbooked! Apparently, the host decided to give the room to someone else willing to pay a higher price. And to add insult to injury, the host claimed to have tried calling and messaging us multiple times, blaming us for not picking up. But hold on a second, the only call we got was at 10 PM on the same day when we were already supposed to check-in at 3 PM! Can you believe our luck at 3 AM in the middle of the night?\nSo, with no place to crash at 3 AM and feeling a bit scared about the safety of the area, we decided to make a run for a safer place. We hailed a cab and headed to the nearest railway station, hoping to catch a train to Victoria. But of course, luck wasn\u0026rsquo;t exactly on our side. Turns out, that station had no trains to Victoria, probably because we were in zone 5. So, we thought, why not book a train to a place in zone 4 instead? Well, that turned out to be a terrible idea because when we got there, it was nothing but a ghost town with a deserted station! Talk about being stuck in the middle of nowhere. But hey, thank goodness for Google Maps, because we found out that there was another station nearby in Zone 3 with better facilities and, most importantly, toilets! So, we made a beeline for that station, and despite its lack of fancy amenities, it had a ticket machine that we could use. But of course, life couldn\u0026rsquo;t be that easy - the machine only allowed us to book off-peak tickets, and we needed to travel during peak hours at 4 AM! However, thanks to my brilliant idea to check the off-peak hours, we discovered that off-peak tickets behaved like regular day rider tickets on a Sunday. Huzzah! Finally, we managed to get our tickets, thanks to it being a Sunday and a bank holiday.\nDesperate to escape the deserted stations and find a place with decent facilities for a bathroom break, we set our hopes on Canada Water, which also happened to have an underground/overground junction. So, we could switch to the underground if needed. But alas, Canada Water had no toilets either! But fear not, because we soldiered on to Waterloo, where we finally found all the facilities we needed. We were relieved and decided to call it a night and crash at Waterloo, and boy, what a fantastic way to start the new year! Well, at least we can look back and laugh about it now.\n","permalink":"https://devajith.com/blog/crazy-new-year-2023/","summary":"Oh, New Year\u0026rsquo;s Eve, the night that always promises to be a wild ride! Last year was tweedisc, but this year, it was next level craziness. So, it all started innocently enough on the 31st. We kicked off the day with some Indian masala dosa with vada in the morning, because nothing says \u0026ldquo;Happy New Year\u0026rdquo; like a spicy breakfast.\nThen, we hopped on a ship to cruise down the Thames River for some breathtaking views of London, which is truly a stunning city.","title":"Most craziest new year I've ever had"},{"content":"Why? Get hired I use this blog as a clever tactic to attract awesome recruiters and companies who might want to hire me. It\u0026rsquo;s like my own personal job-hunting billboard. Improve my writing/language skills Okay, so maybe I\u0026rsquo;m not the next Shakespeare (yet), but I\u0026rsquo;m constantly working on it! Every time someone visits my blog, I learn a new word to add to my ever-growing vocabulary. And hey, if you see me in person, feel free to quiz me on the meaning of the word abide . It\u0026rsquo;s all part of my weekly learning log, and the struggle to find the right words is real! A scratchpad for my ideas I\u0026rsquo;m a genius\u0026hellip;or at least I think so in the moment. But if I don\u0026rsquo;t write down my random, sometimes crazy ideas, I\u0026rsquo;ll forget them faster than I forget where I put my keys. So now, thanks to my blog, I have a virtual scratchpad where I jot down all my Eureka moments. Who knows, one of them might just turn into the next big thing! As a note to my future self Picture this: It\u0026rsquo;s 10 years from now, and I\u0026rsquo;m reminiscing about my journey. Well, guess what? Thanks to my blog, I\u0026rsquo;ll have a record of all the crazy things I did, the lessons I learned, and the adventures I embarked on. It\u0026rsquo;s like a time capsule that will remind me why I pursued my passions and didn\u0026rsquo;t waste my time binge-watching Youtube (well, maybe just a little). So, there you have it! My blog is more than just a collection of posts, it\u0026rsquo;s my online playground where I can showcase my skills, dump my thoughts, and leave a trail of hilarious stories for my future self. Plus, it\u0026rsquo;s a great way to procrastinate when I should be doing something else.\n","permalink":"https://devajith.com/blog/why-do-i-have-a-blog/","summary":"Why? Get hired I use this blog as a clever tactic to attract awesome recruiters and companies who might want to hire me. It\u0026rsquo;s like my own personal job-hunting billboard. Improve my writing/language skills Okay, so maybe I\u0026rsquo;m not the next Shakespeare (yet), but I\u0026rsquo;m constantly working on it! Every time someone visits my blog, I learn a new word to add to my ever-growing vocabulary. And hey, if you see me in person, feel free to quiz me on the meaning of the word abide .","title":"Why do I have a blog"},{"content":"What is Tweedisc? Tweedisc is an application that changes the way people engage with Twitter on Discord. It allows users to effortlessly post tweet links on their community Discord servers, and like, share, or retweet each other\u0026rsquo;s tweets without ever leaving Discord.\nUsecase and Target Audience Tweedisc has quickly become an indispensable tool for a wide range of users, including individuals, businesses, projects, and communities on Discord. It simplifies the process of interacting with tweets on Twitter and boosts engagement for small communities by facilitating interactions within Discord. With just a few clicks, users can easily link their Twitter accounts and start liking, sharing, and retweeting tweets, saving time and effort.\nProfits and Expenses My friend helped me ship the product to the target audience. In 10 days, we had 20 people signed up. It runs on a spare google cloud server that I have (basically free, google has an \u0026ldquo;always free\u0026rdquo; VPS instance that I use to run small applications).\nCurrently (as of 26th Jan 2022), the project has one paying customer (5$/month) and 51 users. The cost to run the server is zero, making the net revenue 5$.\nUPDATE: Tweedisc started gaining traction quickly, and within a few months, it reached a milestone of $400 in Monthly Recurring Revenue (MRR). This was a significant achievement for me, it proved that I can make money online and work for myself. With a lot of paying users, Tweedisc was able to generate decent revenue.\nUPDATE2: Despite the initial success, Tweedisc faced a setback when Twitter stopped providing API access. This decision affected the functionality of the tool, as it heavily relied on the Twitter API to interact with tweets. As a result, the project had to be discontinued, and the revenue generation came to a halt.\nDevelopment Sprint The journey of Tweedisc started with an ambitious development sprint that spanned just two days during the New Year. Here\u0026rsquo;s a brief overview of the development process:\nExtensive research and understanding of the API documentations for Twitter and Discord to determine the project\u0026rsquo;s feasibility.\nCoding of a Discord bot using the powerful Python library, discordpy. The bot is designed to react to Twitter links with like and retweet reactions, with notifications sent to the bot whenever a user reacts to a tweet.\nSigning up for a Twitter developer account to gain access to the Twitter API, which is rate-limited but more than sufficient for a prototype.\nImplementation of a seamless linking system that connects a user\u0026rsquo;s Twitter account with their Discord account using OAuth2 authentication for both Discord and Twitter.\nIntegration of the bot with the Twitter API, allowing it to make requests on behalf of users and perform corresponding reactions to tweets whenever a user reacts to a tweet on Discord.\nCreation of a user-friendly system that prompts unregistered users to link their Discord account with a URL, and deletes reactions and sends messages accordingly.\nOther Contributions In addition to the successful development of Tweedisc, I also made significant contributions to the Python API library for Twitter, called \u0026ldquo;Tweepy.\u0026rdquo; I submitted a pull request to address a missing feature, although it did not get merged as the maintainer had already pushed an update. Nevertheless, this experience allowed me to further enhance my coding skills and gain valuable insights into open-source collaboration.\nOauth2 The implementation of OAuth2 for Tweedisc was a challenging yet rewarding experience. It provided me with a deep understanding of how authentication works and allowed me to hone my technical skills in this area.\nReflection Tweedisc was a successful project that earned $5672 in revenue to date and had a significant number of paying users. However, due to Twitter\u0026rsquo;s decision to stop providing API access (made it very expensive), the project had to be discontinued. Tweedisc was my first successful startup.\n","permalink":"https://devajith.com/blog/tweedisc/","summary":"What is Tweedisc? Tweedisc is an application that changes the way people engage with Twitter on Discord. It allows users to effortlessly post tweet links on their community Discord servers, and like, share, or retweet each other\u0026rsquo;s tweets without ever leaving Discord.\nUsecase and Target Audience Tweedisc has quickly become an indispensable tool for a wide range of users, including individuals, businesses, projects, and communities on Discord. It simplifies the process of interacting with tweets on Twitter and boosts engagement for small communities by facilitating interactions within Discord.","title":"Tweedisc, a twitter integration bot"},{"content":"Interesting idea, but this is still a work in progress.\nMotivation So, picture this: I\u0026rsquo;m a broke university student who loves singing and playing instruments, but can\u0026rsquo;t afford a piano or a guitar. But fear not! I\u0026rsquo;ve got a computer with a keyboard, and I\u0026rsquo;m a coding enthusiast.\nSo I thought, why not combine my love for music and coding? And thus, the idea was born to play piano with a computer keyboard! But of course, it\u0026rsquo;s still a work in progress, so bear with me here.\nNow, I did some serious analysis, mostly on pianos. Did you know a classical piano has 88 keys, but a regular computer keyboard has 101 keys? Talk about a close match! But wait, some laptop keyboards have fewer keys, and we can\u0026rsquo;t mess with those function keys, or we risk wrecking our computer settings.\nWhat is a way to play piano with fewer keyboard keys? So, what\u0026rsquo;s the solution? Well, we\u0026rsquo;ve got 26 character keys, 10 numbers, and 10 special keys to work with. And the cool thing about computer keyboards is that we can use combinations, like using Shift for added options. With some clever mapping, we can cover the entire piano keyboard with just 44 characters!\nLimitations But of course, there\u0026rsquo;s a catch. Musicians often need to play two tones concurrently, which can get tricky with non-one-to-one mapping. Like, try playing c and Shift + c at the same time, it\u0026rsquo;s like attempting to walk in two opposite directions with each foot - an impossible feet (pun intended) that defies the laws of physics.\nBut fret not, I\u0026rsquo;ve got a plan! I\u0026rsquo;ll assign the shorter black keys (sharps) to Shift + character combinations, since they\u0026rsquo;re less commonly used. And after some thorough Googling, turns out a chord with both flats and sharps is pretty uncommon, so it\u0026rsquo;s all good for our use case!\nImplementation ideas Now, onto the implementation ideas. I\u0026rsquo;m thinking of making this software run anywhere, and I\u0026rsquo;ve got a soft spot for the Rust programming language. But hey, I\u0026rsquo;m not sure how portable that\u0026rsquo;ll be, so I might consider making a web app with web assembly.\nOh, and here\u0026rsquo;s the best part! I\u0026rsquo;ve got plans to gamify this whole thing, taking inspiration from a popular app/game called \u0026ldquo;Piano Tiles\u0026rdquo;. Imagine black tiles pouring down the screen, and you gotta tap them at the right time to play sweet tunes! 🎶🎮 But unlike \u0026ldquo;Piano Tiles\u0026rdquo;, you\u0026rsquo;ll be playing real music, not just wasting time! 🎵\nIf I move along with this idea, I plan to release it under an open-source license.\nOf course, with all the university placements, assignments, and part-time work, time might be a challenge, but hey, where there\u0026rsquo;s a will, there\u0026rsquo;s a way!\nUpdate Good news (or bad?), everyone! I\u0026rsquo;ve been able to save up some money thanks to my internship as a compiler engineer, and I finally bought a real piano! So, I might have to scrap my \u0026ldquo;keyboard piano\u0026rdquo; project after all. Turns out, playing on an actual piano is a whole different ballgame. But hey, at least I won\u0026rsquo;t be limited to just 44 keys anymore! Can\u0026rsquo;t wait to unleash my musical talents on those real piano keys. Who knows, maybe I\u0026rsquo;ll even learn to play a chord with both flats and sharps - take that, limitations! Cheers to chasing dreams.\n","permalink":"https://devajith.com/blog/pc-keyboard-as-a-piano/","summary":"Interesting idea, but this is still a work in progress.\nMotivation So, picture this: I\u0026rsquo;m a broke university student who loves singing and playing instruments, but can\u0026rsquo;t afford a piano or a guitar. But fear not! I\u0026rsquo;ve got a computer with a keyboard, and I\u0026rsquo;m a coding enthusiast.\nSo I thought, why not combine my love for music and coding? And thus, the idea was born to play piano with a computer keyboard!","title":"Play Piano on a PC Keyboard"}]